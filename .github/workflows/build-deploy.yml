name: Build & Deploy Backend

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Java
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      # Build backend
      - name: Build backend (skip tests)
        run: |
          cd zarnab-panel-parent
          mvn -B package -DskipTests

      # Upload artifact to workflow storage
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: zarnab-application/target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download artifact
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./artifact

      # Copy artifact to Hetzner via SCP
      - name: Copy artifact to Hetzner
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ vars.SSH_HOST }}
          username: deploy
          key: ${{ secrets.SSH_KEY }}
          source: "./artifact/*.jar"
          target: "/var/www/zarnab/backend/zarnab-application/target/"

      # Deploy backend on server
      - name: docker compose up
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SSH_HOST }}
          username: deploy
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Ensure git trusts the directory
            git config --global --add safe.directory /var/www/zarnab/backend

            cd /var/www/zarnab/backend

            # Pull latest Docker config
            git pull origin master

            # Build and run Docker
            mv zarnab-application/target/artifact/*.jar ./zarnab-application/target/app.jar
            cd zarnab-application/target
            ls
            cd ../../
            cd docker-compose/dev
            # docker compose down -v
            # rm -R postgres_data
            docker compose build
            docker compose up -d --remove-orphans

            # Clean up dangling images
            docker image prune -f
